STACK SEGMENT PARA STACK 'STACK'
STA DB 512 DUP(?)
TOP EQU LENGTH STA
STACK ENDS

DATA SEGMENT
BUFF DB 'INPUT ERROR!', 0DH, 0AH, '$'
DATA0 DB 20 DUP(0)
DATA1 DB 40 DUP(0)
DATA2 DB 40 DUP(0)
DATA3 DB 21 DUP(0)
DATA ENDS

CODE SEGMENT
	ASSUME CS:CODE, DS:DATA, SS:STACK
START:
	MOV AX, DATA
	MOV DS, AX
	MOV AX, STACK
	MOV SS, AX
	MOV SP, TOP
MM:
	XOR CX, CX
	MOV SI, OFFSET DATA1
	MOV AH, 01
	INT 21H
	CMP AL, 30H
	JB AD9
	CMP AL. 39H
	JA AD9
AD1:
	MOV [SI], AL
	INC SI
	INC CX
	MOV AH, 01
	INT 21H
	CMP AL, 30H
	JB AD2
	CMP AL, 39H
	JA AD9
	JMP AD1
AD9:
	JMP AD99
AD2:
	CMP AL, 2BH
	JNE AD9
	XOR BX, BX
	MOV DI, OFFSET DATA2
	MOV AH, 01
	INT 21H
	CMP AL, 30H
	JB AD9
	CMP AL, 39H
	JA AD9
AD3:
	MOV [DI], AL
	INC DI
	INC BX
	MOV AH, 01
	INT 21H
	CMP AL, 30H
	JB AD9
	CMP AL, 39H
	JA AD4
	JMP AD3
AD4:
	CMP AL, 3DH
	JNE AD9
	CMP CX, BX
	JNB AD5
	XCHG CX, BX
AD5:
	PUSH CX
	DEC SI
	DEC DI
	MOV BX, OFFSET DATA3
	CLC
AD6:
    MOV AH, 0
    MOV AL, [SI]
    MOV AL, [DI]
    AAA
    MOV [BX], AL
    DEC SI
    DEC DI
    INC BX
    LOOP AD6
    MOV [BX], AH
    POP CX
    INC CX
    PUSH CX
    MOV SI, OFFSET DATA3
AD7:
    ADD BYTE PTR[SI], 30H
    INC SI
    LOOP AD7
    POP CX
    CMP BYTE PTR[BX], 30H
    JNE AD8
    DEC BX
    DEC CX
AD8:
    MOV AH, 02
    MOV DL, [BX]
    INT 21H
    DEC BX
    LOOP AD8
    MOV DL, 0DH
    MOV AH, 02
    INT 21H
    MOV DL, 0AH
    MOV AH, 02
    INT 21H
    JMP MM
AD99:
    CMP AL, 03H
    JNE ERR0
    MOV AH, 4CH
    INT 21H
ERR0:
    MOV DL, 0DH
    MOV AH, 02
    INT 21H
    MOV DL, 0AH
    MOV AH, 02
    INT 21H
    MOV DX, OFFSET BUFF
    MOV AH, 09
    INT 21H
    JMP MM
CODE ENDS
END START
